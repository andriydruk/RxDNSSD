apply plugin: 'com.android.library'

repositories {
    mavenCentral()
}

android {
    compileSdkVersion 28

    defaultConfig {
        minSdkVersion 14
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
        }
    }

    testOptions {
        unitTests.returnDefaultValues = true
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    externalNativeBuild {
        ndkBuild {
            path "src/main/jni/Android.mk"
        }
    }
}

dependencies {
    testImplementation 'junit:junit:4.12'
    // Last version that support Power Mock: https://github.com/powermock/powermock/wiki/Mockito#supported-versions
    testImplementation 'org.mockito:mockito-core:3.5.7'
    testImplementation ('org.powermock:powermock-api-mockito2:1.7.3') {
        exclude module: 'hamcrest-core'
        exclude module: 'objenesis'
    }
    testImplementation ('org.powermock:powermock-module-junit4:1.7.3') {
        exclude module: 'hamcrest-core'
        exclude module: 'objenesis'
    }
}

apply from: rootProject.file('bintray-publish.gradle')

//Add PMD checks
apply plugin: 'pmd'
pmd {
    toolVersion = '5.4.0'
    ignoreFailures = false // Fail early.
    ruleSetFiles = files("${buildscript.sourceFile.parent}/pmd.xml")
    ruleSets = []
    //sourceSets = fileTree('src/main/java/com/github')
}

//Add findbugs
plugins.apply('findbugs')
task findbugs(type: FindBugs) {
    ignoreFailures = false // Fail early.
    effort = 'max'
    reportLevel = 'low' // Report even low priority problems.
    reports {
        xml {
            enabled = false
        }
        html {
            enabled = true
        }
    }
    classes = files("${project.projectDir}/build/intermediates/javac/debug/compileDebugJavaWithJavac/classes/com/github/druk/dnssd")
    source = fileTree('src/main/java/com/github')
    classpath = files()
    excludeFilter = file("${buildscript.sourceFile.parent}/findbugs-filter.xml")
}

//TODO: fix checkstyle
//Add checkstyle checks
//plugins.apply('checkstyle')
//checkstyle {
//    toolVersion = '6.15'
//}
//task checkstyle(type: Checkstyle) {
//    configFile file("${buildscript.sourceFile.parent}/checkstyle.xml")
//    ignoreFailures = false // Fail early.
//    showViolations false
//    source 'src/main/java/com/github'
//    include '**/*.java'
//    reports {
//        html.enabled = true
//    }
//    classpath = files()
//}

//check.doLast {
//    project.tasks.getByName("pmd").execute()
//    project.tasks.getByName("findbugs").execute()
//    //project.tasks.getByName("checkstyle").execute()
//}
