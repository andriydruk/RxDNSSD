apply plugin: 'com.android.library'
apply plugin: 'com.novoda.bintray-release'

android {
    compileSdkVersion 26
    buildToolsVersion "26.0.1"

    defaultConfig {
        minSdkVersion 14
        targetSdkVersion 26
        versionCode 1
        versionName "1.0"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
        }
    }

    testOptions {
        unitTests.returnDefaultValues = true
    }
}

dependencies {
    compile project(':library')
    //compile 'com.github.andriydruk:dnssd:0.9.0'

    compile 'io.reactivex:rxandroid:1.2.1'
    compile 'io.reactivex:rxjava:1.3.0'
    compile 'com.android.support:support-annotations:26.0.0-alpha1'
    compile 'com.google.code.findbugs:annotations:2.0.1'

    testCompile 'junit:junit:4.12'
    testCompile 'org.mockito:mockito-core:2.0.5-beta'
    testCompile ('org.powermock:powermock-api-mockito:1.6.2') {
        exclude module: 'hamcrest-core'
        exclude module: 'objenesis'
    }
    testCompile ('org.powermock:powermock-module-junit4:1.6.2') {
        exclude module: 'hamcrest-core'
        exclude module: 'objenesis'
    }
}

publish {
    groupId = 'com.github.andriydruk'
    artifactId = 'rxdnssd'
    publishVersion = '0.9.0'
    desc = 'Android library which is Rx wrapper for Apple DNSSD Java API'
    licences = ['Apache-2.0']
    website = 'https://github.com/andriydruk/RxDNSSD'
}

//Add PMD checks
plugins.apply('pmd')
pmd {
    toolVersion = '5.4.0'
}
task pmd(type: Pmd) {
    ignoreFailures = false // Fail early.
    ruleSetFiles = files("${buildscript.sourceFile.parent}/pmd.xml")
    ruleSets = []
    source = fileTree('src/main/java/com/github')
}

//Add findbugs
plugins.apply('findbugs')
task findbugs(type: FindBugs) {
    ignoreFailures = false // Fail early.
    effort = 'max'
    reportLevel = 'low' // Report even low priority problems.
    reports {
        xml {
            enabled = false
        }
        html {
            enabled = true
        }
    }
    classes = files("${project.projectDir}/build/intermediates/classes/debug/com/github")
    source = fileTree('src/main/java/com/github')
    classpath = files()
    excludeFilter = file("${buildscript.sourceFile.parent}/findbugs-filter.xml")
}

//Add checkstyle checks
plugins.apply('checkstyle')
checkstyle {
    toolVersion = '6.15'
}
task checkstyle(type: Checkstyle) {
    configFile file("${buildscript.sourceFile.parent}/checkstyle.xml")
    ignoreFailures = false // Fail early.
    showViolations false
    source 'src/main/java/com/github'
    include '**/*.java'
    reports {
        html.enabled = true
    }
    classpath = files()
}

check.doLast {
    project.tasks.getByName("pmd").execute()
    project.tasks.getByName("findbugs").execute()
    project.tasks.getByName("checkstyle").execute()
}
